"use strict";(self.webpackChunkdocs_www=self.webpackChunkdocs_www||[]).push([[826],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return m}});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=a.createContext({}),s=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},p=function(e){var n=s(e.components);return a.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=s(t),m=i,f=d["".concat(c,".").concat(m)]||d[m]||u[m]||o;return t?a.createElement(f,r(r({ref:n},p),{},{components:t})):a.createElement(f,r({ref:n},p))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,r=new Array(o);r[0]=d;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:i,r[1]=l;for(var s=2;s<o;s++)r[s]=t[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},8752:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return u}});var a=t(7462),i=t(3366),o=(t(7294),t(3905)),r=["components"],l={sidebar_position:4},c="swa-cli.config.json",s={unversionedId:"cli/swa-cli-config",id:"cli/swa-cli-config",title:"swa-cli.config.json",description:"The CLI can also load options from a swa-cli.config.json file:",source:"@site/docs/cli/5-swa-cli-config.md",sourceDirName:"cli",slug:"/cli/swa-cli-config",permalink:"/swa-cli-docs/docs/cli/swa-cli-config",editUrl:"https://github.com/azure/static-web-apps-cli/tree/main/docs/www/docs/cli/5-swa-cli-config.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"swa deploy",permalink:"/swa-cli-docs/docs/cli/swa-deploy"},next:{title:"env vars",permalink:"/swa-cli-docs/docs/cli/env-vars"}},p={},u=[{value:"Example",id:"example",level:3},{value:"Validation",id:"validation",level:3},{value:"Local authentication &amp; authorization emulation",id:"local-authentication--authorization-emulation",level:2},{value:"Mocking credentials",id:"mocking-credentials",level:3},{value:"Reading credentials",id:"reading-credentials",level:3}],d={toc:u};function m(e){var n=e.components,t=(0,i.Z)(e,r);return(0,o.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"swa-cliconfigjson"},(0,o.kt)("inlineCode",{parentName:"h1"},"swa-cli.config.json")),(0,o.kt)("p",null,"The CLI can also load options from a ",(0,o.kt)("inlineCode",{parentName:"p"},"swa-cli.config.json")," file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "configurations": {\n    "app": {\n      "outputLocation": "http://localhost:3000",\n      "apiLocation": "api",\n      "run": "npm run start",\n      "swaConfigLocation": "./my-app-source"\n    }\n  }\n}\n')),(0,o.kt)("p",null,"If only a single configuration is present in the ",(0,o.kt)("inlineCode",{parentName:"p"},"swa-cli.config.json")," file, running ",(0,o.kt)("inlineCode",{parentName:"p"},"swa start")," will use it by default. If options are loaded from a config file, no options passed in via command line will be respected. For example ",(0,o.kt)("inlineCode",{parentName:"p"},"swa start app --ssl=true"),". The ",(0,o.kt)("inlineCode",{parentName:"p"},"--ssl=true")," option will not be picked up by the CLI."),(0,o.kt)("h3",{id:"example"},"Example"),(0,o.kt)("p",null,"We can simplify these commands by putting the options into a config file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"# static configuration\nswa start ./my-dist --swa-config-location ./my-app-source\n\n# devserver configuration\nswa start http://localhost:3000 --swa-config-location ./my-app-source\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "configurations": {\n    "static": {\n      "outputLocation": "./my-dist",\n      "swaConfigLocation": "./my-app-source"\n    },\n    "devserver": {\n      "outputLocation": "http://localhost:3000",\n      "swaConfigLocation": "./my-app-source"\n    }\n  }\n}\n')),(0,o.kt)("p",null,"These configurations can be run with ",(0,o.kt)("inlineCode",{parentName:"p"},"swa start static")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"swa start devserver"),"."),(0,o.kt)("h3",{id:"validation"},"Validation"),(0,o.kt)("p",null,"You can validate your ",(0,o.kt)("inlineCode",{parentName:"p"},"swa-cli.config.json")," with a JSON Schema like so:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "$schema": "https://raw.githubusercontent.com/Azure/static-web-apps-cli/main/schema/swa-cli.config.schema.json",\n  "configurations": {\n    ...\n  }\n}\n')),(0,o.kt)("h2",{id:"local-authentication--authorization-emulation"},"Local authentication & authorization emulation"),(0,o.kt)("p",null,"The CLI allows to mock and read authentication and authorization credentials."),(0,o.kt)("h3",{id:"mocking-credentials"},"Mocking credentials"),(0,o.kt)("p",null,"When requesting the Static Web Apps login endpoints (",(0,o.kt)("inlineCode",{parentName:"p"},"http://localhost:4280/.auth/login/<PROVIDER_NAME>"),"), you have access to a local authentication UI. This interface is served locally from the emulator and allows you to set fake user information for the current user from the provider supplied."),(0,o.kt)("h3",{id:"reading-credentials"},"Reading credentials"),(0,o.kt)("p",null,"The front-end application can request the ",(0,o.kt)("inlineCode",{parentName:"p"},"http://localhost:4280/.auth/me")," endpoint and a ",(0,o.kt)("inlineCode",{parentName:"p"},"clientPrincipal")," containing the fake information will be returned by the authentication API."),(0,o.kt)("p",null,"Here is an example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "clientPrincipal": {\n    "identityProvider": "twitter",\n    "userId": "<USER-UUID>",\n    "userDetails": "<USER_NAME>",\n    "userRoles": ["anonymous", "authenticated"],\n    "claims": [\n      {\n        "typ": "name",\n        "val": "Azure Static Web Apps"\n      }\n    ]\n  }\n}\n')),(0,o.kt)("p",null,"The API functions can access user information using the ",(0,o.kt)("inlineCode",{parentName:"p"},"x-ms-client-principal")," header."),(0,o.kt)("p",null,"See ",(0,o.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/azure/static-web-apps/user-information"},"Accessing user information")," documentation for more details."))}m.isMDXComponent=!0}}]);